@use "sass:meta";
@use "sass:map";
@use "sass:math";
@use "sass:list";

@mixin clamp($initial, $additional: null) {
    @if meta.type-of($initial) == "map" {
        @each $prop, $val in $initial {
            $important: null;
           #{$prop}: generateClamp($val);
        }
    }
    @else if $additional != null {   
         #{$initial}: generateClamp($additional);
    }
}
@mixin clamp-reverse($initial, $additional: null) {
    @if meta.type-of($initial) == "map" {
        @each $prop, $val in $initial {
            $important: null;
           #{$prop}: generateClamp($val, true);
        }
    }
    @else if $additional != null {   
         #{$initial}: generateClamp($additional, true);
    }
}


@mixin line-height($lh, $fsz) {
    $original: calc($lh / $fsz);

    line-height: calc(round($original * 100) / 100);
}

@mixin rem($initial, $additional: null, $base: null) {
    @if not(map.get($SETTINGS, pixels_only)) {
        @if meta.type-of($initial) == "map" {
            @each $prop, $val in $initial {
                #{$prop}: calculateValue($val);
            }
        }
        @else if $additional != null {
            @if($base != null) {
                #{$initial}: calculateValue($additional, $base);
            }
            @else {
                #{$initial}: calculateValue($additional);
            }
        }
        @else {
            @error "Missing second argument or incorrect usage of rem mixin.";
        }
    }
    @else {
        @if meta.type-of($initial) == "map" {
            @each $prop, $val in $initial {
                #{$prop}: $val;
            }
        }
        @else if $additional != null {
            #{$initial}: $additional;
        }
        @else {
            @error "Missing second argument or incorrect usage of rem mixin.";
        }
    }
}

@mixin transform($args...) {
  -webkit-transform: #{$args};
  -moz-transform: #{$args};
  -ms-transform: #{$args};
  -o-transform: #{$args};
  transform: #{$args}; 
}

@mixin media($breakpoint, $type: min) {
  $size: map.get(map.get($CONTAINER, $breakpoint), width);
  @if $size {
    @media (#{$type}-width: #{$size}) {
      @content;
    }
  } @else {
    @warn "Нет брейкпоинта #{$breakpoint} в $MEDIA.";
  }
}

@mixin text_adaptive($type, $map) {
    $font_size: map.get($map, font_size);
    $line_height: map.get($map, line_height);
    $font_weight: map.get($map, font_weight);
    $mediaType: if(map.get($SETTINGS, mobile_first), min, max);    

    #{$type} {
        font-weight: $font_weight;
        overflow-wrap: break-word;
        word-break: normal;
        text-wrap: pretty;
        @include rem(font-size, $font_size);

        @if not math.is-unitless($line_height) {
            @include line-height($line_height, $font_size);
        }
        @else {
            line-height: $line_height;
        }
    }

    @supports (font-size: clamp(1rem, 2vw, 2rem)) {
        $map_container: map.get($map, clamp);

        @if($map_container != null) {
            #{$type} {
                $max: math.max(map.get(map.get($map, clamp), font_size), $font_size);
                $min: math.min(map.get(map.get($map, clamp), font_size), $font_size);

                $modificator: 0.01 * map.get(map.get($map, clamp), width);

                $preffered: math.div($max, $modificator) + vw;
                
                $max: pxToRem($max);
                $min: pxToRem($min);

                font-size: clamp($min, $preffered, $max);
            }      
        }
    }

    @supports not (font-size: clamp(1rem, 2vw, 2rem)) {
        $map_container: map.get($map, media);
        
        @if($map_container != null) {
            #{$type} {
                @each $media, $multiplier in map.get($map, media) {
                    @include media($media, $mediaType) {                    
                        @if math.is-unitless($multiplier) {
                            @include rem(font-size, ($font_size * $multiplier));
                        }
                        @else {
                            @include rem(font-size, $multiplier);
                        }                    
                    }
                }
            }
        }
       
    }

    @supports (hyphens: auto) {
        #{$type} {
            hyphens: auto;
        }
    }

    @supports (text-wrap: balance) {
        #{$type} {
            text-wrap: balance;
        }
    }
} 