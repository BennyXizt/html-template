@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "sass:math";

@function generateClamp($list, $reverse: null) {
    $restriction: $HEADERS_CLAMP_WIDTH;
    $important: null;

    @if meta.type-of(list.nth($list, 1)) == 'number' and meta.type-of(list.nth($list, 2)) == 'number' {
            $max: list.nth($list, 1);
            $min: list.nth($list, 2);

            @if list.length($list) == 3 {
                $tempVal: list.nth($list, 3);

                @if(meta.type-of($tempVal) == 'string' and $tempVal == '!important') {
                    $important: $tempVal;
                }
                @else {
                    $restriction: $tempVal;
                }                
            }
            @else if list.length($list) == 4 {
                $restriction: list.nth($list, 3);
                $tempVal: list.nth($list, 4);

                @if(meta.type-of($tempVal) == 'string' and $tempVal == '!important') {
                    $important: $tempVal;
                }                                    
            }
            @return if($important == '!important', calculateClamp($min, $max, $restriction, $reverse)!important, calculateClamp($min, $max, $restriction, $reverse));
    }
    @else {
        $tempFinalValue: ();
        @for $i from 1 through list.length($list) {
            @if meta.type-of(list.nth($list, $i)) == 'list' {
                $sublist: list.nth($list, $i);

                $max: list.nth($sublist, 1);
                $min: list.nth($sublist, 2);

                @if list.length($sublist) == 3 {
                    $tempVal: list.nth($sublist, 3);

                    @if(meta.type-of($tempVal) == 'string' and $tempVal == '!important') {
                        $important: $tempVal;
                    }
                    @else {
                        $restriction: $tempVal;
                    }                
                }
                @else if list.length($sublist) == 4 {
                    $restriction: list.nth($sublist, 3);
                    $tempVal: list.nth($sublist, 4);

                    @if(meta.type-of($tempVal) == 'string' and $tempVal == '!important') {
                        $important: $tempVal;
                    }                                    
                }
                
                $tempFinalValue: list.append($tempFinalValue, calculateClamp($min, $max, $restriction, $reverse));
            }
            @else {
                $tempFinalValue: list.append($tempFinalValue, list.nth($list, $i));
            }
        }
        @return if($important == '!important', $tempFinalValue !important,  $tempFinalValue);
    }
}
@function calculateClamp($min, $max, $restriction, $reverse) {
   @if not ($reverse) {
        $modificator: 0.01 * $restriction;
        $preffered: math.div($max, $modificator) + vw;
        $min: pxToRem($min);
        $max: pxToRem($max);
        @return clamp($min, $preffered, $max);
   }
   @else {
        $range: $max - $min;
        $mod: math.abs($range / $restriction);

        $min: pxToRem($min);
        $max: pxToRem($max);
        $restriction: pxToRem($restriction);
        $mod: pxToRem($mod);
        $preferred: calc(#{$max} + (($restriction - 100vw) * #{$mod}));

        

        @return clamp($max, $preferred, $min);
   }
}
@function pxToRem($px, $base: null) {
    @if math.unit($px) != 'px' {
        @return $px;
    }       

    @if(map.get($BASE, font_size) <= abs($px) + 5px and not map.get($SETTINGS, pixels_only)) {
       @if $base != null {
         @return calc(round(($px / $base) * 100) / 100) * 1rem;
       }
       @else {
         @return calc(round(($px / map.get($BASE, font_size)) * 100) / 100) * 1rem;
       }
    }
    @return $px;
}
@function calculateValue($val, $base: null) {
   @if $base != null {
    @if meta.type-of($val) == "list" {
        $isImportant: false;
        $temp: ();
        @each $elem in $val {
            @if(meta.type-of($elem) == 'number') {
                $temp: list.append($temp, pxToRem($elem, $base));
            }
            @else if(meta.type-of($elem) == 'string' and $elem == '!important') {
                 $isImportant: true;
            }
        }
        @if($isImportant) {
            $temp: list.append($temp, !important);
        }

        @return $temp;
    }
    @else {
        @return pxToRem($val, $base);
    }
   }
   @else {
     @if meta.type-of($val) == "list" {
        $isImportant: false;
        $temp: ();
        @each $elem in $val {
            @if(meta.type-of($elem) == 'number') {
                $temp: list.append($temp, pxToRem($elem));
            }
            @else if(meta.type-of($elem) == 'string' and $elem == '!important') {
                 $isImportant: true;
            }
        }
        @if($isImportant) {
            $temp: list.append($temp, !important);
        }

        @return $temp;
    }
    @else {
        @return pxToRem($val);
    }
   }
}
